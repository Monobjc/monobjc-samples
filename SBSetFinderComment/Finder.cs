// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Monobjc.ScriptingBridge.Finder {
    using System;
    using Monobjc;
    using Monobjc.Foundation;
    using Monobjc.AppKit;
    using Monobjc.ScriptingBridge;
    
    
    public enum FinderPriv : uint {
        
        // 'read' => '0x72656164'
        FinderPrivReadOnly = 1919246692u,
        
        // 'rdwr' => '0x72647772'
        FinderPrivReadWrite = 1919186802u,
        
        // 'writ' => '0x77726974'
        FinderPrivWriteOnly = 2003986804u,
        
        // 'none' => '0x6E6F6E65'
        FinderPrivNone = 1852796517u,
    }
    
    public enum FinderEdfm : uint {
        
        // 'dfhf' => '0x64666866'
        FinderEdfmMacOSFormat = 1684432998u,
        
        // 'dfh+' => '0x6466682B'
        FinderEdfmMacOSExtendedFormat = 1684432939u,
        
        // 'dfuf' => '0x64667566'
        FinderEdfmUFSFormat = 1684436326u,
        
        // 'dfnf' => '0x64666E66'
        FinderEdfmNFSFormat = 1684434534u,
        
        // 'dfau' => '0x64666175'
        FinderEdfmAudioFormat = 1684431221u,
        
        // 'dfpr' => '0x64667072'
        FinderEdfmProDOSFormat = 1684435058u,
        
        // 'dfms' => '0x64666D73'
        FinderEdfmMSDOSFormat = 1684434291u,
        
        // 'dfnt' => '0x64666E74'
        FinderEdfmNTFSFormat = 1684434548u,
        
        // 'df96' => '0x64663936'
        FinderEdfmISO9660Format = 1684420918u,
        
        // 'dfhs' => '0x64666873'
        FinderEdfmHighSierraFormat = 1684433011u,
        
        // 'dfqt' => '0x64667174'
        FinderEdfmQuickTakeFormat = 1684435316u,
        
        // 'dfph' => '0x64667068'
        FinderEdfmApplePhotoFormat = 1684435048u,
        
        // 'dfas' => '0x64666173'
        FinderEdfmAppleShareFormat = 1684431219u,
        
        // 'dfud' => '0x64667564'
        FinderEdfmUDFFormat = 1684436324u,
        
        // 'dfwd' => '0x64667764'
        FinderEdfmWebDAVFormat = 1684436836u,
        
        // 'dfft' => '0x64666674'
        FinderEdfmFTPFormat = 1684432500u,
        
        // 'dfpu' => '0x64667075'
        FinderEdfmPacketWrittenUDFFormat = 1684435061u,
        
        // 'dfac' => '0x64666163'
        FinderEdfmXsanFormat = 1684431203u,
        
        // 'df??' => '0x64663F3F'
        FinderEdfmUnknownFormat = 1684422463u,
    }
    
    public enum FinderIpnl : uint {
        
        // 'gpnl' => '0x67706E6C'
        FinderIpnlGeneralInformationPanel = 1735421548u,
        
        // 'spnl' => '0x73706E6C'
        FinderIpnlSharingPanel = 1936748140u,
        
        // 'mpnl' => '0x6D706E6C'
        FinderIpnlMemoryPanel = 1836084844u,
        
        // 'vpnl' => '0x76706E6C'
        FinderIpnlPreviewPanel = 1987079788u,
        
        // 'apnl' => '0x61706E6C'
        FinderIpnlApplicationPanel = 1634758252u,
        
        // 'pklg' => '0x706B6C67'
        FinderIpnlLanguagesPanel = 1886088295u,
        
        // 'pkpg' => '0x706B7067'
        FinderIpnlPluginsPanel = 1886089319u,
        
        // 'npnl' => '0x6E706E6C'
        FinderIpnlNameExtensionPanel = 1852862060u,
        
        // 'cpnl' => '0x63706E6C'
        FinderIpnlCommentsPanel = 1668312684u,
        
        // 'cinl' => '0x63696E6C'
        FinderIpnlContentIndexPanel = 1667853932u,
        
        // 'bpnl' => '0x62706E6C'
        FinderIpnlBurningPanel = 1651535468u,
        
        // 'minl' => '0x6D696E6C'
        FinderIpnlMoreInfoPanel = 1835626092u,
        
        // 'shnl' => '0x73686E6C'
        FinderIpnlSimpleHeaderPanel = 1936223852u,
    }
    
    public enum FinderPple : uint {
        
        // 'pgnp' => '0x70676E70'
        FinderPpleGeneralPreferencesPanel = 1885826672u,
        
        // 'plbp' => '0x706C6270'
        FinderPpleLabelPreferencesPanel = 1886151280u,
        
        // 'psid' => '0x70736964'
        FinderPpleSidebarPreferencesPanel = 1886611812u,
        
        // 'padv' => '0x70616476'
        FinderPpleAdvancedPreferencesPanel = 1885430902u,
    }
    
    public enum FinderEcvw : uint {
        
        // 'icnv' => '0x69636E76'
        FinderEcvwIconView = 1768124022u,
        
        // 'lsvw' => '0x6C737677'
        FinderEcvwListView = 1819506295u,
        
        // 'clvw' => '0x636C7677'
        FinderEcvwColumnView = 1668052599u,
        
        // 'grvw' => '0x67727677'
        FinderEcvwGroupView = 1735554679u,
        
        // 'flvw' => '0x666C7677'
        FinderEcvwFlowView = 1718384247u,
    }
    
    public enum FinderEarr : uint {
        
        // 'narr' => '0x6E617272'
        FinderEarrNotArranged = 1851880050u,
        
        // 'grda' => '0x67726461'
        FinderEarrSnapToGrid = 1735550049u,
        
        // 'nama' => '0x6E616D61'
        FinderEarrArrangedByName = 1851878753u,
        
        // 'mdta' => '0x6D647461'
        FinderEarrArrangedByModificationDate = 1835299937u,
        
        // 'cdta' => '0x63647461'
        FinderEarrArrangedByCreationDate = 1667527777u,
        
        // 'siza' => '0x73697A61'
        FinderEarrArrangedBySize = 1936292449u,
        
        // 'kina' => '0x6B696E61'
        FinderEarrArrangedByKind = 1802071649u,
        
        // 'laba' => '0x6C616261'
        FinderEarrArrangedByLabel = 1818321505u,
    }
    
    public enum FinderEpos : uint {
        
        // 'lrgt' => '0x6C726774'
        FinderEposRight = 1819436916u,
        
        // 'lbot' => '0x6C626F74'
        FinderEposBottom = 1818390388u,
    }
    
    public enum FinderSodr : uint {
        
        // 'snrm' => '0x736E726D'
        FinderSodrNormal = 1936618093u,
        
        // 'srvs' => '0x73727673'
        FinderSodrReversed = 1936881267u,
    }
    
    public enum FinderElsv : uint {
        
        // 'elsn' => '0x656C736E'
        FinderElsvNameColumn = 1701606254u,
        
        // 'elsm' => '0x656C736D'
        FinderElsvModificationDateColumn = 1701606253u,
        
        // 'elsc' => '0x656C7363'
        FinderElsvCreationDateColumn = 1701606243u,
        
        // 'elss' => '0x656C7373'
        FinderElsvSizeColumn = 1701606259u,
        
        // 'elsk' => '0x656C736B'
        FinderElsvKindColumn = 1701606251u,
        
        // 'elsl' => '0x656C736C'
        FinderElsvLabelColumn = 1701606252u,
        
        // 'elsv' => '0x656C7376'
        FinderElsvVersionColumn = 1701606262u,
        
        // 'elsC' => '0x656C7343'
        FinderElsvCommentColumn = 1701606211u,
    }
    
    public enum FinderLvic : uint {
        
        // 'smic' => '0x736D6963'
        FinderLvicSmallIcon = 1936550243u,
        
        // 'lgic' => '0x6C676963'
        FinderLvicLargeIcon = 1818716515u,
    }
    
    public enum FinderIsiz : uint {
        
        // 'miic' => '0x6D696963'
        FinderIsizMini = 1835624803u,
        
        // 'smic' => '0x736D6963'
        FinderIsizSmall = 1936550243u,
        
        // 'lgic' => '0x6C676963'
        FinderIsizLarge = 1818716515u,
    }
    
    public enum FinderSort : uint {
        
        // 'pnam' => '0x706E616D'
        FinderSortName = 1886282093u,
        
        // 'asmo' => '0x61736D6F'
        FinderSortModificationDate = 1634954607u,
        
        // 'ascd' => '0x61736364'
        FinderSortCreationDate = 1634952036u,
        
        // 'phys' => '0x70687973'
        FinderSortSize = 1885895027u,
        
        // 'kind' => '0x6B696E64'
        FinderSortKind = 1802071652u,
        
        // 'labi' => '0x6C616269'
        FinderSortLabelIndex = 1818321513u,
        
        // 'comt' => '0x636F6D74'
        FinderSortComment = 1668246900u,
        
        // 'vers' => '0x76657273'
        FinderSortVersion = 1986359923u,
    }
    
    public class FinderApplication : SBApplication {
        
        public FinderApplication() {
        }
        
        public FinderApplication(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray AliasFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "aliasFiles");
            }
        }
        
        public virtual SBElementArray ApplicationFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "applicationFiles");
            }
        }
        
        public virtual SBElementArray Clippings {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "clippings");
            }
        }
        
        public virtual SBElementArray ClippingWindows {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "clippingWindows");
            }
        }
        
        public virtual SBElementArray Containers {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "containers");
            }
        }
        
        public virtual SBElementArray Disks {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "disks");
            }
        }
        
        public virtual SBElementArray DocumentFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "documentFiles");
            }
        }
        
        public virtual SBElementArray Files {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "files");
            }
        }
        
        public virtual SBElementArray FinderWindows {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "FinderWindows");
            }
        }
        
        public virtual SBElementArray Folders {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "folders");
            }
        }
        
        public virtual SBElementArray InternetLocationFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "internetLocationFiles");
            }
        }
        
        public virtual SBElementArray Items {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "items");
            }
        }
        
        public virtual SBElementArray Packages {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "packages");
            }
        }
        
        public virtual SBElementArray Windows {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "windows");
            }
        }
        
        public virtual SBObject Clipboard {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "clipboard");
            }
        }
        
        public virtual FinderComputerObject ComputerContainer {
            get {
                return ObjectiveCRuntime.SendMessage <FinderComputerObject>(this, "computerContainer");
            }
        }
        
        public virtual FinderDesktopObject Desktop {
            get {
                return ObjectiveCRuntime.SendMessage <FinderDesktopObject>(this, "desktop");
            }
        }
        
        public virtual FinderFile DesktopPicture {
            get {
                return ObjectiveCRuntime.SendMessage <FinderFile>(this, "desktopPicture");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopPicture:", value);
            }
        }
        
        public virtual FinderPreferences FinderPreferences {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPreferences>(this, "FinderPreferences");
            }
        }
        
        public virtual Boolean Frontmost {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "frontmost");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setFrontmost:", value);
            }
        }
        
        public virtual FinderFolder Home {
            get {
                return ObjectiveCRuntime.SendMessage <FinderFolder>(this, "home");
            }
        }
        
        public virtual SBObject InsertionLocation {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "insertionLocation");
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
        }
        
        public virtual NSString ProductVersion {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "productVersion");
            }
        }
        
        public virtual SBObject Selection {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "selection");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setSelection:", value);
            }
        }
        
        public virtual FinderDisk StartupDisk {
            get {
                return ObjectiveCRuntime.SendMessage <FinderDisk>(this, "startupDisk");
            }
        }
        
        public virtual FinderTrashObject Trash {
            get {
                return ObjectiveCRuntime.SendMessage <FinderTrashObject>(this, "trash");
            }
        }
        
        public virtual Boolean Visible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "visible");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setVisible:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void Copy() {
            ObjectiveCRuntime.SendMessage(this, "copy");
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Quit() {
            ObjectiveCRuntime.SendMessage(this, "quit");
        }
        
        public virtual void Restart() {
            ObjectiveCRuntime.SendMessage(this, "restart");
        }
        
        public virtual void ShutDown() {
            ObjectiveCRuntime.SendMessage(this, "shutDown");
        }
        
        public virtual void Sleep() {
            ObjectiveCRuntime.SendMessage(this, "sleep");
        }
    }
    
    public class FinderItem : SBObject {
        
        public FinderItem() {
        }
        
        public FinderItem(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSRect Bounds {
            get {
                return ObjectiveCRuntime.SendMessage <NSRect>(this, "bounds");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setBounds:", value);
            }
        }
        
        public virtual NSString Comment {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "comment");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setComment:", value);
            }
        }
        
        public virtual SBObject Container {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "container");
            }
        }
        
        public virtual NSDate CreationDate {
            get {
                return ObjectiveCRuntime.SendMessage <NSDate>(this, "creationDate");
            }
        }
        
        public virtual NSPoint DesktopPosition {
            get {
                return ObjectiveCRuntime.SendMessage <NSPoint>(this, "desktopPosition");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopPosition:", value);
            }
        }
        
        public virtual SBObject Disk {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "disk");
            }
        }
        
        public virtual NSString DisplayedName {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "displayedName");
            }
        }
        
        public virtual FinderPriv EveryonesPrivileges {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPriv>(this, "everyonesPrivileges");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setEveryonesPrivileges:", value);
            }
        }
        
        public virtual Boolean ExtensionHidden {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "extensionHidden");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setExtensionHidden:", value);
            }
        }
        
        public virtual NSString Group {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "group");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setGroup:", value);
            }
        }
        
        public virtual FinderPriv GroupPrivileges {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPriv>(this, "groupPrivileges");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setGroupPrivileges:", value);
            }
        }
        
        public virtual FinderIconFamily Icon {
            get {
                return ObjectiveCRuntime.SendMessage <FinderIconFamily>(this, "icon");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIcon:", value);
            }
        }
        
        public virtual NSInteger Index {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "index");
            }
        }
        
        public virtual SBObject InformationWindow {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "informationWindow");
            }
        }
        
        public virtual NSString Kind {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "kind");
            }
        }
        
        public virtual NSInteger LabelIndex {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "labelIndex");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setLabelIndex:", value);
            }
        }
        
        public virtual Boolean Locked {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "locked");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setLocked:", value);
            }
        }
        
        public virtual NSDate ModificationDate {
            get {
                return ObjectiveCRuntime.SendMessage <NSDate>(this, "modificationDate");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setModificationDate:", value);
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setName:", value);
            }
        }
        
        public virtual NSString NameExtension {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "nameExtension");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setNameExtension:", value);
            }
        }
        
        public virtual NSString Owner {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "owner");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setOwner:", value);
            }
        }
        
        public virtual FinderPriv OwnerPrivileges {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPriv>(this, "ownerPrivileges");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setOwnerPrivileges:", value);
            }
        }
        
        public virtual long PhysicalSize {
            get {
                return ObjectiveCRuntime.SendMessage <long>(this, "physicalSize");
            }
        }
        
        public virtual NSPoint Position {
            get {
                return ObjectiveCRuntime.SendMessage <NSPoint>(this, "position");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setPosition:", value);
            }
        }
        
        public virtual NSDictionary Properties {
            get {
                return ObjectiveCRuntime.SendMessage <NSDictionary>(this, "properties");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setProperties:", value);
            }
        }
        
        public virtual long Size {
            get {
                return ObjectiveCRuntime.SendMessage <long>(this, "size");
            }
        }
        
        public virtual NSString URL {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "URL");
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderContainer : FinderItem {
        
        public FinderContainer() {
        }
        
        public FinderContainer(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray AliasFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "aliasFiles");
            }
        }
        
        public virtual SBElementArray ApplicationFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "applicationFiles");
            }
        }
        
        public virtual SBElementArray Clippings {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "clippings");
            }
        }
        
        public virtual SBElementArray Containers {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "containers");
            }
        }
        
        public virtual SBElementArray DocumentFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "documentFiles");
            }
        }
        
        public virtual SBElementArray Files {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "files");
            }
        }
        
        public virtual SBElementArray Folders {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "folders");
            }
        }
        
        public virtual SBElementArray InternetLocationFiles {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "internetLocationFiles");
            }
        }
        
        public virtual SBElementArray Items {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "items");
            }
        }
        
        public virtual SBElementArray Packages {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "packages");
            }
        }
        
        public virtual Boolean CompletelyExpanded {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "completelyExpanded");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCompletelyExpanded:", value);
            }
        }
        
        public virtual SBObject ContainerWindow {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "containerWindow");
            }
        }
        
        public virtual SBObject EntireContents {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "entireContents");
            }
        }
        
        public virtual Boolean Expandable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "expandable");
            }
        }
        
        public virtual Boolean Expanded {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "expanded");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setExpanded:", value);
            }
        }
    }
    
    public class FinderComputerObject : FinderItem {
        
        public FinderComputerObject() {
        }
        
        public FinderComputerObject(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderDisk : FinderContainer {
        
        public FinderDisk() {
        }
        
        public FinderDisk(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual long Capacity {
            get {
                return ObjectiveCRuntime.SendMessage <long>(this, "capacity");
            }
        }
        
        public virtual Boolean Ejectable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "ejectable");
            }
        }
        
        public virtual FinderEdfm Format {
            get {
                return ObjectiveCRuntime.SendMessage <FinderEdfm>(this, "format");
            }
        }
        
        public virtual long FreeSpace {
            get {
                return ObjectiveCRuntime.SendMessage <long>(this, "freeSpace");
            }
        }
        
        public virtual NSInteger Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "id");
            }
        }
        
        public virtual Boolean IgnorePrivileges {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "ignorePrivileges");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIgnorePrivileges:", value);
            }
        }
        
        public virtual Boolean JournalingEnabled {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "journalingEnabled");
            }
        }
        
        public virtual Boolean LocalVolume {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "localVolume");
            }
        }
        
        public virtual Boolean Startup {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "startup");
            }
        }
    }
    
    public class FinderFolder : FinderContainer {
        
        public FinderFolder() {
        }
        
        public FinderFolder(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderDesktopObject : FinderContainer {
        
        public FinderDesktopObject() {
        }
        
        public FinderDesktopObject(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray Disks {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "disks");
            }
        }
    }
    
    public class FinderTrashObject : FinderContainer {
        
        public FinderTrashObject() {
        }
        
        public FinderTrashObject(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Boolean WarnsBeforeEmptying {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "warnsBeforeEmptying");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setWarnsBeforeEmptying:", value);
            }
        }
    }
    
    public class FinderFile : FinderItem {
        
        public FinderFile() {
        }
        
        public FinderFile(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSNumber CreatorType {
            get {
                return ObjectiveCRuntime.SendMessage <NSNumber>(this, "creatorType");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCreatorType:", value);
            }
        }
        
        public virtual NSNumber FileType {
            get {
                return ObjectiveCRuntime.SendMessage <NSNumber>(this, "fileType");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setFileType:", value);
            }
        }
        
        public virtual NSString ProductVersion {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "productVersion");
            }
        }
        
        public virtual Boolean Stationery {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "stationery");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setStationery:", value);
            }
        }
    }
    
    public class FinderAliasFile : FinderFile {
        
        public FinderAliasFile() {
        }
        
        public FinderAliasFile(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBObject OriginalItem {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "originalItem");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setOriginalItem:", value);
            }
        }
    }
    
    public class FinderApplicationFile : FinderFile {
        
        public FinderApplicationFile() {
        }
        
        public FinderApplicationFile(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Boolean AcceptsHighLevelEvents {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "acceptsHighLevelEvents");
            }
        }
        
        public virtual Boolean HasScriptingTerminology {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "hasScriptingTerminology");
            }
        }
        
        public virtual NSString Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "id");
            }
        }
        
        public virtual NSInteger MinimumSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "minimumSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setMinimumSize:", value);
            }
        }
        
        public virtual Boolean OpensInClassic {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "opensInClassic");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setOpensInClassic:", value);
            }
        }
        
        public virtual NSInteger PreferredSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "preferredSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setPreferredSize:", value);
            }
        }
        
        public virtual NSInteger SuggestedSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "suggestedSize");
            }
        }
    }
    
    public class FinderDocumentFile : FinderFile {
        
        public FinderDocumentFile() {
        }
        
        public FinderDocumentFile(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderInternetLocationFile : FinderFile {
        
        public FinderInternetLocationFile() {
        }
        
        public FinderInternetLocationFile(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSString Location {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "location");
            }
        }
    }
    
    public class FinderClipping : FinderFile {
        
        public FinderClipping() {
        }
        
        public FinderClipping(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBObject ClippingWindow {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "clippingWindow");
            }
        }
    }
    
    public class FinderPackage : FinderItem {
        
        public FinderPackage() {
        }
        
        public FinderPackage(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderWindow : SBObject {
        
        public FinderWindow() {
        }
        
        public FinderWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSRect Bounds {
            get {
                return ObjectiveCRuntime.SendMessage <NSRect>(this, "bounds");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setBounds:", value);
            }
        }
        
        public virtual Boolean Closeable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "closeable");
            }
        }
        
        public virtual Boolean Collapsed {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "collapsed");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCollapsed:", value);
            }
        }
        
        public virtual Boolean Floating {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "floating");
            }
        }
        
        public virtual NSInteger Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "id");
            }
        }
        
        public virtual NSInteger Index {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "index");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIndex:", value);
            }
        }
        
        public virtual Boolean Modal {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "modal");
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
        }
        
        public virtual NSPoint Position {
            get {
                return ObjectiveCRuntime.SendMessage <NSPoint>(this, "position");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setPosition:", value);
            }
        }
        
        public virtual NSDictionary Properties {
            get {
                return ObjectiveCRuntime.SendMessage <NSDictionary>(this, "properties");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setProperties:", value);
            }
        }
        
        public virtual Boolean Resizable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "resizable");
            }
        }
        
        public virtual Boolean Titled {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "titled");
            }
        }
        
        public virtual Boolean Visible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "visible");
            }
        }
        
        public virtual Boolean Zoomable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "zoomable");
            }
        }
        
        public virtual Boolean Zoomed {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "zoomed");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setZoomed:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderFinderWindow : FinderWindow {
        
        public FinderFinderWindow() {
        }
        
        public FinderFinderWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual FinderColumnViewOptions ColumnViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderColumnViewOptions>(this, "columnViewOptions");
            }
        }
        
        public virtual FinderEcvw CurrentView {
            get {
                return ObjectiveCRuntime.SendMessage <FinderEcvw>(this, "currentView");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCurrentView:", value);
            }
        }
        
        public virtual FinderIconViewOptions IconViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderIconViewOptions>(this, "iconViewOptions");
            }
        }
        
        public virtual FinderListViewOptions ListViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderListViewOptions>(this, "listViewOptions");
            }
        }
        
        public virtual NSInteger SidebarWidth {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "sidebarWidth");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setSidebarWidth:", value);
            }
        }
        
        public virtual Boolean StatusbarVisible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "statusbarVisible");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setStatusbarVisible:", value);
            }
        }
        
        public virtual SBObject Target {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "target");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setTarget:", value);
            }
        }
        
        public virtual Boolean ToolbarVisible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "toolbarVisible");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setToolbarVisible:", value);
            }
        }
    }
    
    public class FinderDesktopWindow : FinderFinderWindow {
        
        public FinderDesktopWindow() {
        }
        
        public FinderDesktopWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderInformationWindow : FinderWindow {
        
        public FinderInformationWindow() {
        }
        
        public FinderInformationWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual FinderIpnl CurrentPanel {
            get {
                return ObjectiveCRuntime.SendMessage <FinderIpnl>(this, "currentPanel");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCurrentPanel:", value);
            }
        }
        
        public virtual SBObject Item {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "item");
            }
        }
    }
    
    public class FinderPreferencesWindow : FinderWindow {
        
        public FinderPreferencesWindow() {
        }
        
        public FinderPreferencesWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual FinderPple CurrentPanel {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPple>(this, "currentPanel");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCurrentPanel:", value);
            }
        }
    }
    
    public class FinderClippingWindow : FinderWindow {
        
        public FinderClippingWindow() {
        }
        
        public FinderClippingWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
    }
    
    public class FinderProcess : SBObject {
        
        public FinderProcess() {
        }
        
        public FinderProcess(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Boolean AcceptsHighLevelEvents {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "acceptsHighLevelEvents");
            }
        }
        
        public virtual Boolean AcceptsRemoteEvents {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "acceptsRemoteEvents");
            }
        }
        
        public virtual NSNumber CreatorType {
            get {
                return ObjectiveCRuntime.SendMessage <NSNumber>(this, "creatorType");
            }
        }
        
        public virtual SBObject File {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "file");
            }
        }
        
        public virtual NSNumber FileType {
            get {
                return ObjectiveCRuntime.SendMessage <NSNumber>(this, "fileType");
            }
        }
        
        public virtual Boolean Frontmost {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "frontmost");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setFrontmost:", value);
            }
        }
        
        public virtual Boolean HasScriptingTerminology {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "hasScriptingTerminology");
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
        }
        
        public virtual NSInteger PartitionSpaceUsed {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "partitionSpaceUsed");
            }
        }
        
        public virtual NSInteger TotalPartitionSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "totalPartitionSize");
            }
        }
        
        public virtual Boolean Visible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "visible");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setVisible:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderApplicationProcess : FinderProcess {
        
        public FinderApplicationProcess() {
        }
        
        public FinderApplicationProcess(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual FinderApplicationFile ApplicationFile {
            get {
                return ObjectiveCRuntime.SendMessage <FinderApplicationFile>(this, "applicationFile");
            }
        }
    }
    
    public class FinderDeskAccessoryProcess : FinderProcess {
        
        public FinderDeskAccessoryProcess() {
        }
        
        public FinderDeskAccessoryProcess(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBObject DeskAccessoryFile {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "deskAccessoryFile");
            }
        }
    }
    
    public class FinderPreferences : SBObject {
        
        public FinderPreferences() {
        }
        
        public FinderPreferences(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Boolean AllNameExtensionsShowing {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "allNameExtensionsShowing");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setAllNameExtensionsShowing:", value);
            }
        }
        
        public virtual FinderColumnViewOptions ColumnViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderColumnViewOptions>(this, "columnViewOptions");
            }
        }
        
        public virtual Double DelayBeforeSpringing {
            get {
                return ObjectiveCRuntime.SendMessage <Double>(this, "delayBeforeSpringing");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDelayBeforeSpringing:", value);
            }
        }
        
        public virtual Boolean DesktopShowsConnectedServers {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "desktopShowsConnectedServers");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopShowsConnectedServers:", value);
            }
        }
        
        public virtual Boolean DesktopShowsExternalHardDisks {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "desktopShowsExternalHardDisks");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopShowsExternalHardDisks:", value);
            }
        }
        
        public virtual Boolean DesktopShowsHardDisks {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "desktopShowsHardDisks");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopShowsHardDisks:", value);
            }
        }
        
        public virtual Boolean DesktopShowsRemovableMedia {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "desktopShowsRemovableMedia");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDesktopShowsRemovableMedia:", value);
            }
        }
        
        public virtual Boolean FoldersOpenInNewWindows {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "foldersOpenInNewWindows");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setFoldersOpenInNewWindows:", value);
            }
        }
        
        public virtual Boolean FoldersSpringOpen {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "foldersSpringOpen");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setFoldersSpringOpen:", value);
            }
        }
        
        public virtual FinderIconViewOptions IconViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderIconViewOptions>(this, "iconViewOptions");
            }
        }
        
        public virtual FinderListViewOptions ListViewOptions {
            get {
                return ObjectiveCRuntime.SendMessage <FinderListViewOptions>(this, "listViewOptions");
            }
        }
        
        public virtual SBObject NewWindowTarget {
            get {
                return ObjectiveCRuntime.SendMessage <SBObject>(this, "newWindowTarget");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setNewWindowTarget:", value);
            }
        }
        
        public virtual Boolean NewWindowsOpenInColumnView {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "newWindowsOpenInColumnView");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setNewWindowsOpenInColumnView:", value);
            }
        }
        
        public virtual FinderPreferencesWindow Window {
            get {
                return ObjectiveCRuntime.SendMessage <FinderPreferencesWindow>(this, "window");
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderLabel : SBObject {
        
        public FinderLabel() {
        }
        
        public FinderLabel(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSColor Color {
            get {
                return ObjectiveCRuntime.SendMessage <NSColor>(this, "color");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setColor:", value);
            }
        }
        
        public virtual NSInteger Index {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "index");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIndex:", value);
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setName:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderIconFamily : SBObject {
        
        public FinderIconFamily() {
        }
        
        public FinderIconFamily(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Id Large32BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "large32BitIcon");
            }
        }
        
        public virtual Id Large4BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "large4BitIcon");
            }
        }
        
        public virtual Id Large8BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "large8BitIcon");
            }
        }
        
        public virtual Id Large8BitMask {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "large8BitMask");
            }
        }
        
        public virtual Id LargeMonochromeIconAndMask {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "largeMonochromeIconAndMask");
            }
        }
        
        public virtual Id Small32BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "small32BitIcon");
            }
        }
        
        public virtual Id Small4BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "small4BitIcon");
            }
        }
        
        public virtual Id Small8BitIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "small8BitIcon");
            }
        }
        
        public virtual Id Small8BitMask {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "small8BitMask");
            }
        }
        
        public virtual Id SmallMonochromeIconAndMask {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "smallMonochromeIconAndMask");
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderIconViewOptions : SBObject {
        
        public FinderIconViewOptions() {
        }
        
        public FinderIconViewOptions(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual FinderEarr Arrangement {
            get {
                return ObjectiveCRuntime.SendMessage <FinderEarr>(this, "arrangement");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setArrangement:", value);
            }
        }
        
        public virtual NSColor BackgroundColor {
            get {
                return ObjectiveCRuntime.SendMessage <NSColor>(this, "backgroundColor");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setBackgroundColor:", value);
            }
        }
        
        public virtual FinderFile BackgroundPicture {
            get {
                return ObjectiveCRuntime.SendMessage <FinderFile>(this, "backgroundPicture");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setBackgroundPicture:", value);
            }
        }
        
        public virtual NSInteger IconSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "iconSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIconSize:", value);
            }
        }
        
        public virtual FinderEpos LabelPosition {
            get {
                return ObjectiveCRuntime.SendMessage <FinderEpos>(this, "labelPosition");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setLabelPosition:", value);
            }
        }
        
        public virtual Boolean ShowsIconPreview {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsIconPreview");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsIconPreview:", value);
            }
        }
        
        public virtual Boolean ShowsItemInfo {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsItemInfo");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsItemInfo:", value);
            }
        }
        
        public virtual NSInteger TextSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "textSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setTextSize:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderColumnViewOptions : SBObject {
        
        public FinderColumnViewOptions() {
        }
        
        public FinderColumnViewOptions(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual Boolean DisclosesPreviewPane {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "disclosesPreviewPane");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setDisclosesPreviewPane:", value);
            }
        }
        
        public virtual Boolean ShowsIcon {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsIcon");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsIcon:", value);
            }
        }
        
        public virtual Boolean ShowsIconPreview {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsIconPreview");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsIconPreview:", value);
            }
        }
        
        public virtual Boolean ShowsPreviewColumn {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsPreviewColumn");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsPreviewColumn:", value);
            }
        }
        
        public virtual NSInteger TextSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "textSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setTextSize:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderListViewOptions : SBObject {
        
        public FinderListViewOptions() {
        }
        
        public FinderListViewOptions(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray Columns {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "columns");
            }
        }
        
        public virtual Boolean CalculatesFolderSizes {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "calculatesFolderSizes");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setCalculatesFolderSizes:", value);
            }
        }
        
        public virtual FinderLvic IconSize {
            get {
                return ObjectiveCRuntime.SendMessage <FinderLvic>(this, "iconSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIconSize:", value);
            }
        }
        
        public virtual Boolean ShowsIconPreview {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "showsIconPreview");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setShowsIconPreview:", value);
            }
        }
        
        public virtual FinderColumn SortColumn {
            get {
                return ObjectiveCRuntime.SendMessage <FinderColumn>(this, "sortColumn");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setSortColumn:", value);
            }
        }
        
        public virtual NSInteger TextSize {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "textSize");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setTextSize:", value);
            }
        }
        
        public virtual Boolean UsesRelativeDates {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "usesRelativeDates");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setUsesRelativeDates:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderColumn : SBObject {
        
        public FinderColumn() {
        }
        
        public FinderColumn(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSInteger Index {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "index");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setIndex:", value);
            }
        }
        
        public virtual NSInteger MaximumWidth {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "maximumWidth");
            }
        }
        
        public virtual NSInteger MinimumWidth {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "minimumWidth");
            }
        }
        
        public virtual FinderElsv Name {
            get {
                return ObjectiveCRuntime.SendMessage <FinderElsv>(this, "name");
            }
        }
        
        public virtual FinderSodr SortDirection {
            get {
                return ObjectiveCRuntime.SendMessage <FinderSodr>(this, "sortDirection");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setSortDirection:", value);
            }
        }
        
        public virtual Boolean Visible {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "visible");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setVisible:", value);
            }
        }
        
        public virtual NSInteger Width {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "width");
            }
            set {
                ObjectiveCRuntime.SendMessage(this, "setWidth:", value);
            }
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
    
    public class FinderAliasList : SBObject {
        
        public FinderAliasList() {
        }
        
        public FinderAliasList(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual void Activate() {
            ObjectiveCRuntime.SendMessage(this, "activate");
        }
        
        public virtual void CleanUpBy(IntPtr by) {
            ObjectiveCRuntime.SendMessage(this, "cleanUpBy:", by);
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual NSInteger DataSizeAs(NSNumber @as) {
            return ObjectiveCRuntime.SendMessage <NSInteger>(this, "dataSizeAs:", @as);
        }
        
        public virtual SBObject Delete() {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "delete");
        }
        
        public virtual SBObject DuplicateToReplacingRoutingSuppressed(SBObject to, Boolean replacing, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:replacing:routingSuppressed:", to, replacing, routingSuppressed);
        }
        
        public virtual void Eject() {
            ObjectiveCRuntime.SendMessage(this, "eject");
        }
        
        public virtual void EmptySecurity(Boolean security) {
            ObjectiveCRuntime.SendMessage(this, "emptySecurity:", security);
        }
        
        public virtual void Erase() {
            ObjectiveCRuntime.SendMessage(this, "erase");
        }
        
        public virtual Boolean Exists() {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists");
        }
        
        public virtual SBObject MoveToReplacingPositionedAtRoutingSuppressed(SBObject to, Boolean replacing, NSArray positionedAt, Boolean routingSuppressed) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:replacing:positionedAt:routingSuppressed:", to, replacing, positionedAt, routingSuppressed);
        }
        
        public virtual void OpenUsingWithProperties(SBObject @using, NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "openUsing:withProperties:", @using, withProperties);
        }
        
        public virtual void PrintWithProperties(NSDictionary withProperties) {
            ObjectiveCRuntime.SendMessage(this, "printWithProperties:", withProperties);
        }
        
        public virtual void Reveal() {
            ObjectiveCRuntime.SendMessage(this, "reveal");
        }
        
        public virtual void Select() {
            ObjectiveCRuntime.SendMessage(this, "select");
        }
        
        public virtual SBObject SortBy(IntPtr by) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "sortBy:", by);
        }
        
        public virtual void UpdateNecessityRegisteringApplications(Boolean necessity, Boolean registeringApplications) {
            ObjectiveCRuntime.SendMessage(this, "updateNecessity:registeringApplications:", necessity, registeringApplications);
        }
    }
}
